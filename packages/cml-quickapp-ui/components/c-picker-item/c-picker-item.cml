<template>
    <!--<div class="picker-content" style="contentHeight">-->
    <div class="picker-content" style="height: {{height}}cpx;">
      <list class="picker-list" onscroll="onListScroll" id="picker-list">
            <block for="{{list}}">
                <list-item type="first">
                      <text class="{{itemClass($idx === selectedIndex.first)}}" style = "{{computedItemStyle}}">{{$item}}</text>
                </list-item>
            </block>
      </list>
    </div>
</template>
<script>
    import { cmlStyleTransfer } from '../../assets/js/utils'
 class CPickerItem implements CPickerItemInterface {
    props = {
      list: {
        type: Array,
        default: ['']
      },
      defaultIndex: {
        type: Number,
        default: 0
      },
      height: {
        type: Number,
        default: 400
      },
      textAlign: {
        type: String,
        default: "center"
      },
      itemStyle:{
        type: String,
        default: ""
      }
    }
    data = {
      scrollY: {first: 0},
      selectedIndex: {first: 0},
    }
    computed = {
      computedItemStyle() {
          return cmlStyleTransfer(`${this.itemStyle};`);
      },
      contentHeight(){
          return cmlStyleTransfer(`height: ${this.height}cpx;`);
      }

    }
    methods = {
      
      onListScroll(obj) {
        this.scrollY.first += obj.scrollY;
        if (this.scrollY.first < 0) {
              this.scrollY.first = 0;
        }
        const index = Math.round(this.scrollY.first / 56);
        this.selectedIndex.first = index;
        this.$cmlEmit("selectchange", {
          index: this.selectedIndex.first
        });
      },

        itemClass(select) {
            if(select){
                return "item-select-"+this.textAlign
            }else {
                return "item-normal-"+this.textAlign
            }

        }
    }
    mounted() {
     this.$element('picker-list').scrollTo({ index: this.defaultIndex })
     // 支持滑动到底部，黑科技
     let size = Math.floor(this.height / 56) - 1;
     if(size <= 0) {
       return;
     }
     let empty = new Array(size);
     for (let i = 0; i < size; i++) {
        empty[i] = "";
     }
     this.list = this.list.concat(empty);
    }
  }

  export default new CPickerItem();

</script>

<style scoped>
    .picker-content {
        width: 100%;
        margin-top: 59cpx;
        margin-bottom: 59cpx;
        padding-left: 60cpx;
        padding-right: 60cpx;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
    }
    .picker-list {
      height: 100%;
    }

    .item-select-left {
        width: 100%;
        height: 56cpx;
        font-size: 40cpx;
        color: #333333;
        padding: 11cpx;
        text-align: left;
    }

    .item-select-center {
        width: 100%;
        height: 56cpx;
        font-size: 40cpx;
        color: #333333;
        padding: 11cpx;
        text-align: center;
    }

    .item-select-right {
        width: 100%;
        height: 56cpx;
        font-size: 40cpx;
        color: #333333;
        padding: 11cpx;
        text-align: right;
    }

    .item-normal-left {
        width: 100%;
        height: 56cpx;
        font-size: 36cpx;
        color: #999999;
        padding: 11cpx;
        text-align: left;
    }

    .item-normal-center {
        width: 100%;
        height: 56cpx;
        font-size: 36cpx;
        color: #999999;
        padding: 11cpx;
        text-align: center;
    }

    .item-normal-right {
        width: 100%;
        height: 56cpx;
        font-size: 36cpx;
        color: #999999;
        padding: 11cpx;
        text-align: right;
    }

</style>

<script cml-type="json">
{
  "base": {
    "component": true
  }
}
</script>
