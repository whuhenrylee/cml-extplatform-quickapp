<template>
<cml-popup show="{{show}}" mask="{{mask}}">
  <view class="toast-content">
    <image c-if="{{needIcon}}" src="{{typeImg}}" class="toast-icon" />
    <text class="toast-text">{{message}}</text>
  </view>
</cml-popup>
</template>
<script>

class CToast implements CToastInterface {
  props = {
    type: {
      type: String,
      default: "loading"
    },
    message: {
      type: String,
      default: ""
    },
    duration: {
      type: Number,
      default: 3000
    },
    show: {
      type: Boolean,
      default: false
    },
    mask: {
      type: Boolean,
      default: false
    },
    needIcon: {
      type: Boolean,
      default: true
    }
  }
  data = {
    transitionStyle: "",
    IconMap: {
      loading: require("./images/loading.gif"),
      success: require("./images/succ.png"),
      warn: require("./images/warn.png")
    }
  }

  computed = {
    typeImg() {
      return this.IconMap[this.type];
    },
    maskClass() {
      return this.mask ? "has-mask" : "no-mask";
    }
  }

  watch  = {
    show(n, o) {
      if (n) {
        setTimeout(() => {
          this.$cmlEmit("show", { value: false });
        }, this.duration);
      }
    }
  }

  created(){
      console.log("created", this.show);
    if (this.show) {
        setTimeout(() => {
            this.$cmlEmit("show", {value: false});
            console.log("created", this.show);
            this.show = false;
        }, this.duration);
    }
  }

}

export default new CToast();
</script>
<style scoped>

.toast-content {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 26cpx;
  color: #ccc;
  background-color: rgba(37, 38, 45, 0.9);
  border-radius: 4cpx;
}
.toast-icon {
  width: 48cpx;
  height: 48cpx;
  margin-right: 16cpx;
}
.toast-text {
  font-size: 32cpx;
  color: #ffffff;
  line-height: 40cpx;
  font-size: 28cpx;
}

</style>
<script cml-type="json">
{
    "base": {
        "usingComponents": {
          "cml-popup": "../c-popup/c-popup"
        },
        "component": true
    }
}
</script>
